name: Tests

on:
  push:
    branches:
      - main
      - staging
  pull_request:
    branches:
      - main
      - staging

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    env:
      NODE_ENV: test
      NODE_OPTIONS: --experimental-vm-modules
      DATABASE_URL: postgresql://test:test@localhost:5432/testdb
      JWT_SECRET: test-jwt-secret-for-ci-only-min-32-characters

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run database migrations
        run: npm run db:push

      - name: Run tests
        id: tests
        run: npm test
        continue-on-error: true

      - name: Run tests with coverage
        if: steps.tests.outcome == 'success'
        run: npm run test:coverage

      - name: Check test results
        if: steps.tests.outcome == 'failure'
        run: |
          echo "::error::Tests failed"
          echo "::notice::Review the test output above for details on which tests failed"
          echo "## ❌ Tests Failed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Some tests did not pass. Please review the output above and fix the failing tests." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Tips:" >> $GITHUB_STEP_SUMMARY
          echo "- Run \`npm test\` locally to reproduce the failures" >> $GITHUB_STEP_SUMMARY
          echo "- Check that all environment variables are correctly set" >> $GITHUB_STEP_SUMMARY
          echo "- Ensure database migrations are up to date" >> $GITHUB_STEP_SUMMARY
          exit 1

      - name: Upload coverage reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            coverage/
            test-results/
          retention-days: 30
          if-no-files-found: warn

      - name: Generate test summary
        if: steps.tests.outcome == 'success'
        run: |
          echo "## ✅ Tests Passed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "All tests completed successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ -d "coverage" ]; then
            echo "### Coverage Report" >> $GITHUB_STEP_SUMMARY
            echo "Coverage reports have been uploaded as artifacts and are available for 30 days." >> $GITHUB_STEP_SUMMARY
          fi

      - name: Fail workflow if tests failed
        if: steps.tests.outcome == 'failure'
        run: exit 1
